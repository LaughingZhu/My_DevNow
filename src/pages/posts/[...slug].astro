---
import Comment from '@components/Comment.astro';
import TableOfContents from '@components/TableOfContents.astro';
import Code from '@components/mdx/Code.astro';
import SButton from '@components/mdx/MDButton.astro';
import MImage from '@components/mdx/MImage.astro';
import BlogPost from '@layouts/BlogPost.astro';
import { getCollection, type CollectionEntry } from 'astro:content';
import clsx from 'clsx';
import { AiOutlineCloseCircle } from 'react-icons/ai';
type Props = { doc: CollectionEntry<'doc'> };

// 在 server 模式中选择加入预渲染
export const prerender = true;

export async function getStaticPaths() {
  const docs = await getCollection('doc');

  return docs.map((post) => ({
    params: { slug: post.slug },
    props: { doc: post }
  }));
}

const { doc: post } = Astro.props;
const { Content, remarkPluginFrontmatter, headings } = await post.render();
const hasHeadering = headings && !!headings.length;
---

<BlogPost
  id={post.id as any}
  data={post.data}
  headings={headings}
  readTime={remarkPluginFrontmatter.minutesRead}
>
  <div class='flex mt-8 w-full'>
    <!-- aside -->
    {
      hasHeadering && (
        <aside class='md:flex flex-col w-[20%] hidden mr-10 flex-none'>
          <div class='sticky top-24 self-start hidden md:block transition-all duration-200'>
            {<TableOfContents {headings} />}
          </div>
        </aside>
      )
    }

    <div class={clsx('flex-auto overflow-hidden')}>
      <article class='max-w-screen-2xl'>
        <div class='my-3 prose-base dark:prose-invert prose-a:text-blue-600'>
          <div class='prose prose-lg md:prose-xl dark:prose-invert mb-12 min-w-full'>
            <Content components={{ pre: Code, SButton, img: MImage }} />
          </div>
          <Comment />
        </div>
      </article>
    </div>
  </div>
  <div id='postModal' class='modal'>
    <span class='close'>
      <AiOutlineCloseCircle />
    </span>
    <img class='modal-content' id='modal-img' />
    <div id='caption'></div>
  </div>
</BlogPost>

<style>
  .modal {
    display: none;
    position: fixed;
    z-index: 100;
    margin: auto;
    padding: 50px;
    inset: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.9);
    align-items: center;
    justify-content: center;
  }

  .modal-content {
    margin: auto;
    display: block;
    width: 80%;
  }

  .close {
    position: fixed;
    top: 15px;
    right: 35px;
    color: #f1f1f1;
    font-size: 40px;
    font-weight: bold;
    transition: 0.3s;
  }

  .close:hover,
  .close:focus {
    color: #bbb;
    text-decoration: none;
    cursor: pointer;
  }
</style>

<script>
  const modal = document.getElementById('postModal');
  const modalImg = document.getElementById('modal-img') as HTMLImageElement;
  const imgs = document.querySelectorAll('article img') as NodeListOf<HTMLImageElement>;

  imgs.forEach(function (img) {
    img.style.cursor = 'pointer';
    img.addEventListener('click', () => {
      if (modal && modalImg) {
        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden';

        modalImg.src = img.src;
      }
    });
  });

  const span = document.getElementsByClassName('close')[0];
  span?.addEventListener('click', () => {
    if (modal) {
      modal.style.display = 'none';
      document.body.style.overflow = 'auto';
    }
  });
</script>
